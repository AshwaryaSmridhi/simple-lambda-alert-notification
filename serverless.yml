service: simple-project-alert-notification

provider:
  name: aws
  runtime: nodejs18.x
  memorySize: 1024
  stage: ${opt:stage, 'dev'}
  region: ap-southeast-2
  lambdaHashingVersion: 20201221

plugins:
  - serverless-iam-roles-per-function

functions: 
  get-generated-dog-name:
    handler: src/handlers/get-generated-dog-name/endpoint.handler
    events: 
      - http: 
          path: generate/{breed}/name
          method: get
          cors: true
  send-notifications: 
    handler: src/handlers/send-notifications/send-notifications.handler
    iamRoleStatementsName: SendNotificationsLambdaExecutionRole
    iamRoleStatements:
      - Effect: "Allow"        
        Action:
          - sns:Publish        
        Resource: "*"

    environment: 
      SNS_TOPIC_ARN: { Ref: MyNotificationSNSTopic }

    events: 
      - sqs:
          arn:
            Fn::GetAtt: [MyErrorSQSQueue, Arn]
          batchSize: 1
          enabled: true
      - sqs:
          arn:
            Fn::GetAtt: [MyErrorDLQ, Arn]
          batchSize: 1
          enabled: false

package:
  exclude:
    - node_modules/aws-sdk/**

resources: 
  Resources: 
    MyErrorSQSQueue:
      Type: AWS::SQS::Queue
      Properties: 
        QueueName: '${self:service}-${self:provider.stage}-MyErrorSQSQueue'
        RedrivePolicy:
          deadLetterTargetArn:
            Fn::GetAtt: [MyErrorDLQ, Arn]
          maxReceiveCount: 1

    MyErrorSQSQueuePolicy:
      Type: AWS::SQS::QueuePolicy
      Properties:
        Queues:
          - Ref: MyErrorSQSQueue
        PolicyDocument:
          Version: "2012-10-17"
          Statement:
            - Effect: "Allow"
              Principal: "*"
              Action: "sqs:SendMessage"
              Resource: 
                Fn::GetAtt: [MyErrorSQSQueue, Arn]
              Condition:
                ArnEquals:
                  aws:SourceArn: 
                    Ref: MyErrorSNSTopic

    MyErrorDLQ: 
      Type: AWS::SQS::Queue
      Properties: 
        QueueName: '${self:service}-${self:provider.stage}-MyErrorDLQ'

    MyErrorSNSTopic:
      Type: AWS::SNS::Topic
      Properties: 
        TopicName: '${self:service}-${self:provider.stage}-MyErrorSNSTopic'
        Subscription:
          - 
            Endpoint:
              Fn::GetAtt: [MyErrorSQSQueue, Arn]
            Protocol: sqs
          - 
            Endpoint: '+61469956784' # Replace with your phone number
            Protocol: sms
          - 
            Endpoint: 'aishwaryasmridhi@hotmail.com' # Replace with your email
            Protocol: email
    
    MyNotificationSNSTopic:
      Type: AWS::SNS::Topic
      Properties: 
        TopicName: '${self:service}-${self:provider.stage}-MyNotificationSNSTopic'
        Subscription:
          - 
            Endpoint: '+61469956784' # Replace with your phone number
            Protocol: sms
          - 
            Endpoint: 'aishwaryasmridhi@hotmail.com' # Replace with your email
            Protocol: email

    MyCloudWatchAlarm:
      Type: AWS::CloudWatch::Alarm
      Properties:
        AlarmName: '${self:service}-${self:provider.stage}-MyCloudWatchAlarm'
        AlarmDescription: Get generated dog name lambda alarm
        Namespace: AWS/ApiGateway
        MetricName: 5XXError
        Dimensions:
          - Name: ApiName
            Value: ${self:provider.stage}-${self:service}
        Statistic: Sum
        ComparisonOperator: GreaterThanThreshold
        Threshold: 0
        Period: 60
        EvaluationPeriods: 1
        AlarmActions:
          - Ref: MyErrorSNSTopic